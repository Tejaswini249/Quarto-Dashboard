---
title: "My Dashboard"
format: 
  dashboard:
    orientation: columns
---

# User Monitoring

## Column {width="20%"}
### Row {height="30%"}
```{r,loadpackages}
#| echo: false
#| include: false
library(tidyverse)
library(readxl)
library(janitor)
library(hms)
library(quanteda)
library(SentimentAnalysis)
library(tm)
library(memoise)
library(dplyr)

```

```{r,loaddata}
#| echo: false
#| include: false

#csv <- read_xlsx("rocky_masterdf.xlsx")

# Read the CSV file with explicit column types(The 24th column in the Excel file is being read as a logical type)

column_types <- c(
  rep("guess", 23),  # readxl guess the types for the first 23 columns
  "text",            # Explicitly set the 24th column to "text" 
  rep("guess", 24 - 24)  # Let readxl guess the types for any remaining columns
  )

csv <- read_excel("rocky_masterdf.xlsx", col_types = column_types)


# Data preprocessing steps
master_df <- csv %>%
  clean_names() %>%
  separate(timezone, into = c("region", "city"), sep = "/", remove = TRUE) %>%
  separate(date, into = c("date", "time"), sep = 10, remove = TRUE) %>%
  separate(timestamp, into = c("date_stamp", "time_stamp"), sep = 10, remove = TRUE) %>%
  mutate(date = as_date(date)) %>%
  mutate(date_stamp = as_date(date_stamp)) %>%
  mutate(time = hms::as_hms(time)) %>%
  mutate(time_stamp = hms::as_hms(time_stamp)) %>%
  separate(time, into = c("time", "rm"), sep = 8, remove = TRUE) %>%
  separate(time_stamp, into = c("time_stamp", "rm"), sep = 8, remove = TRUE) %>%
  filter(interaction == "chat") %>%
  pivot_longer(cols = c("textfull", "botresponse","botquestion"), names_to = "text_type", values_to = "text") %>%
  mutate(text = iconv(text, to = "ASCII", sub = "")) %>%
  filter(text_type == "textfull") %>%
  rename(user_rating = user_assigned_ratings) %>%
  group_by(user) %>%
  mutate(short_user = paste0("user_", cur_group_id())) %>%
  relocate(short_user, .before = user) %>%
  ungroup() %>%
  select(-x1) %>%
  mutate(X = row_number()) %>%
  relocate(X, .before = short_user)

# Condense data and remove chatbot messages
user_message_df <- master_df %>%
  select(X, short_user, profile, region, city, date_stamp, time_stamp, member, text) %>%
  filter(member == "user") %>%
  select(-member) %>% 
  mutate(id = row_number())##%>%
  ##na.omit(texts)

```


```{r,createDTM}

# Create document-term matrix from user text
dtm <- user_message_df %>%
  corpus(text_field = "text") %>%
  tokens(remove_punct = TRUE) %>%
  tokens_remove(stopwords("en")) %>%
  dfm()

```


```{r,createDictionary}
#| echo: false
#| include: false

# Creating a sentiment dictionary using the General Inquirer dictionary
GI_dict <- dictionary(DictionaryGI)

# assign words and remove from dictionary
negative_cleaned <- setdiff(GI_dict$negative, c("get","need", "can", "want", "try", "make", "show", "bit"))

# create cleaned dictionary
clean_neg_DICT <- dictionary(list(negative = negative_cleaned))

# Create a new dictionary with cleaned negative words merged with original positive words
merged_dict <- dictionary(
  list(
    positive = GI_dict$positive,
    negative = c(clean_neg_DICT$negative)
  )
)

```

```{r,ComputeSentimentScore}
# Looking up sentiment terms in the DTM and compute scores

sentiment_scores <- dtm %>%
  dfm_lookup(merged_dict) %>%
  convert(to = "data.frame") %>%
  as_tibble() %>%
  mutate(length = ntoken(dtm)) %>%
  mutate(sentiment1 = round(((positive - negative)/ (positive + negative)),2)) %>%
  mutate(sentiment2 = round(((positive - negative)/ length),2)) %>%
  mutate(subjectivity = round((positive + negative)/ length, 2)) %>%
  separate(doc_id, into = c("rm", "id"), sep = 4) %>%
  select(-rm) %>%
  mutate(id = as.numeric(id))

```

```{r,mergeScoreWithTextString}
#| echo: false
#| include: false

# Merge score results with text strings
sentiment_results <- inner_join(sentiment_scores, user_message_df, by = "id") %>%
  select(-id)

# Fine-tune for messages with more than 15 words
filtered_sentiment_results <- sentiment_results %>%
  filter(str_count(text, "\\S+") >= 10) %>%
  filter(sentiment2 < 0) %>%
  arrange(sentiment2) %>%
  mutate(id = row_number())

```

```{r,createReferenceObject}

#| echo: false
#| include: false

# Create reference object of users for lookup in all user messages data
user_reference <- filtered_sentiment_results %>%
  distinct(short_user)

# Use reference to pull all messages for each user
all_user_messages <- user_message_df %>%
  mutate(test = if_else(short_user %in% user_reference$short_user, 1, 0)) %>%
  group_by(short_user) %>%
  mutate(cumsum = sum(test)) %>%
  filter(cumsum > 0) %>%
  select(-test, -cumsum) %>%
  filter(str_count(text, "\\S+") >= 3) %>%
  ungroup() %>%
  mutate(id = row_number())

```


```{r,createDTM-2}
#| echo: false
#| include: false

# Create document-term matrix with all filtered user messages.
dtm2 <- all_user_messages %>%
  corpus(text_field = "text") %>%
  tokens(remove_punct = TRUE) %>%
  tokens_remove(stopwords("en")) %>%
  dfm()

```

```{r,ComputeSentimentScore-DTM2}

#| echo: false
#| include: false

# Looking up sentiment terms in the DTM and compute scores
sentiment_scores_all <- dtm2 %>%
  dfm_lookup(merged_dict) %>%
  convert(to = "data.frame") %>%
  as_tibble() %>%
  mutate(length = ntoken(dtm2)) %>%
  mutate(sentiment1 = round(((positive - negative)/ (positive + negative)),2)) %>%
  mutate(sentiment2 = round(((positive - negative)/ length),2)) %>%
  mutate(subjectivity = round((positive + negative)/ length, 2)) %>%
  separate(doc_id, into = c("rm", "id"), sep = 4) %>%
  select(-rm) %>%
  mutate(id = as.numeric(id))

```



```{r,FinalData}

#| echo: false
#| include: false

all_messages_results <- inner_join(sentiment_scores_all, all_user_messages, by = "id")

final_data <- all_messages_results %>%
  relocate(date_stamp, .before = time_stamp) %>%
  mutate(date_time = ymd_hms(paste(date_stamp, time_stamp))) %>%
  mutate(date_time = ymd_hms(date_time)) %>%
  relocate(date_time, .after = time_stamp)

# Assign % to filter by
y <- (round(nrow(filtered_sentiment_results)*.10, 0))

filtered_results <- filtered_sentiment_results %>%
  head(n = y)

cleaned_data <- filtered_results %>%
  mutate(cleaned_text = tolower(text)) %>%
  mutate(cleaned_text = removePunctuation(cleaned_text)) %>%
  mutate(cleaned_text = removeNumbers(cleaned_text)) %>%
  mutate(cleaned_text = removeWords(cleaned_text, stopwords("en"))) %>%
  mutate(cleaned_text = stripWhitespace(cleaned_text)) %>%
  select(time_stamp, region, city, text, cleaned_text)

```

```{r, sendtoojs}

# Send the final data to Observable JS
ojs_define(final_data_ojs = final_data)

```

```{ojs}
//| expandable: false

// Transpose the data to make it usable in Observable JS
final_ojs = transpose(final_data_ojs);


// Create a dropdown menu for region
viewof regionDropdown = Inputs.select(
  final_ojs.map(d => d.region),
  {
    label: "Select Region",
    unique: true
  }
)

// Filter cities based on the selected region
filteredCities = final_ojs.filter(d => d.region === regionDropdown)

// Create a dropdown menu for cities
viewof cityDropdown = Inputs.select(
  filteredCities.map(d => d.city),
  {
    label: "Select City",
    unique: true
  }
)

// Filter users based on the selected region and city
filteredUsers = final_ojs.filter(d => d.region === regionDropdown && d.city === cityDropdown)


// Create a dropdown menu for users
viewof userDropdown = Inputs.select(
  filteredUsers.map(d => d.short_user),
  {
    label: "Select User",
    unique: true
  }
)

//// Filter data based on the selected region,city and user
 filtered_data = final_ojs.filter(d => d.region === regionDropdown && d.city === cityDropdown && d.short_user === userDropdown).map((d, i) => ({ ...d, id: i + 1 })) 
 
```

### Row {height="70%"}

```{ojs}

// Define your value box component
function valueBox(value, label, color = "lightgreen") {
  return html`<div style="display: flex; flex-direction: column; align-items: center; justify-content: center; 
    width: 350px; height: 300px; background-color: ${color}; border-radius: 10px; box-shadow: 2px 2px 10px rgba(0,0,0,0.1); 
    font-family: Arial, sans-serif;">
    <div style="font-size: 24px; font-weight: bold;">${value}</div>
    <div style="font-size: 14px; color: gray;">${label}</div>
  </div>`;
}

// Example usage
viewof myValueBox = valueBox("Placeholder", "Alerted Emotions", "lightgreen");

```




## Column {width="80%"} {.tabset}


### Plot



```{ojs}



Plot.plot({
  marks: [
    Plot.dot(filtered_data, {x: "date_time", y: "sentiment2",fill: "Division"}),
    Plot.line(filtered_data,
      {x: "date_time", y: "sentiment2"},
      { stroke: "black" })
  ]
})



```


### Data
```{ojs}


 Inputs.table(filtered_data, {
  columns: [
    "date_time",
    "sentiment2",
    "text"
  ],
  header: {
   date_time: "Time",
   sentiment2: "Sentiment Score",
   text: "Text"
  },
  layout: "auto"
})



<!-- Inputs.table(filtered_data) -->

```


# Keyword Search
## Column {width="100%"}
### Row {height="10%"}
```{ojs}

viewof keyword = Inputs.text({label: "Enter Keyword", placeholder: "Keyword"})

```

### Row {height="90%"}
Placeholder Datatable

# Report

## {.sidebar}

```{ojs}
 //| expandable: false
// Create a dropdown menu for region
viewof regionDropdown_R = Inputs.select(
  final_ojs.map(d => d.region),
  {
    label: "Select Region",
    unique: true,
    multiple: true
  }
)

```



```{ojs}
// Create a dropdown menu for cities
viewof cityDropdown_R = Inputs.select(
  final_ojs.filter(d => regionDropdown_R.includes(d.region)).map(d => d.city),
  {
    label: "Select City",
    unique: true,
    multiple: true
  }
)

```


## Column {width="80%"}
### Row {height="90%"}
```{r}

 report_data <- filtered_sentiment_results %>% 
    arrange(sentiment2)

  # Assign % to filter by
  y <- (round(nrow(report_data)*.10, 0))

  report_data <- report_data %>%
    head(n = y)

  alert_ref <- report_data %>%
    group_by(city) %>%
    summarise(n_alerts = n_distinct(text))
  
  sentiment_results_R <-  sentiment_results %>%
                          filter(length >= 3) %>% 
                          group_by(region, city) %>%
                          summarise(user_count = n_distinct(short_user),
                          mean_sentiment = round(mean(sentiment2), 3)) %>%
                          left_join(alert_ref, by = "city") %>%
                          mutate(n_alerts = if_else(is.na(n_alerts), 0, n_alerts)) %>%
                          relocate(n_alerts, .after = user_count) %>%
                          mutate(alerts_per_user = if_else(n_alerts > 0, round(n_alerts/user_count, 3), 0))


  # Send the sentiment_results to Observable JS
ojs_define(sentiment_results1 = sentiment_results_R )
```

::: {.card title="My Report"}

```{ojs}
//| expandable: false

// Transpose the data to make it usable in Observable JS
sentiment_results_ojs = transpose(sentiment_results1);

filtered_data_R = sentiment_results_ojs.filter(d => regionDropdown_R.includes(d.region) && cityDropdown_R.includes(d.city) )

Inputs.table(filtered_data_R )

```
:::


### Row {height="10%"}
Note:To select multilple values cmd + select
